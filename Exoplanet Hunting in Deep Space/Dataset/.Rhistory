library(tidyverse)
library(httr)
library(jsonlite)
# Method 1: Direct download and read
url <- "https://exoplanetarchive.ipac.caltech.edu/TAP/sync?query=select+*+from+cumulative&format=csv"
kepler_data <- read.csv(url)
library(tidyverse)
library(caret)
library(dplyr)
library(MASS)
library(randomForest)
library(xgboost)
library(e1071)
library(keras)
library(lightgbm)
library(corrplot)
library(RColorBrewer)
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read the raw data
kepler_data <- read.csv("cumulative.csv")
# 1. First create numeric class for stepwise
stepwise_data <- kepler_data %>%
mutate(class_numeric = case_when(
koi_disposition == "CONFIRMED" ~ 2,
koi_disposition == "CANDIDATE" ~ 1,
koi_disposition == "FALSE POSITIVE" ~ 0
))
# 2. Select initial features for stepwise analysis
stepwise_data <- stepwise_data %>%
dplyr::select(
# Main transit features
koi_period, koi_impact, koi_duration, koi_depth,
# Planet characteristics
koi_prad, koi_teq, koi_insol,
# Star characteristics
koi_steff, koi_slogg, koi_srad,
# Signal quality
koi_model_snr, koi_score,
# Outcome
class_numeric
)
# 3. Run stepwise selection
full_model <- lm(class_numeric ~ ., data = stepwise_data)
step_model <- stepAIC(full_model, direction = "both")
# 4. Get selected features from stepwise results
selected_features <- names(coef(step_model))[-1]  # Remove intercept
selected_features <- c(selected_features, "koi_disposition")  # Add target variable
summary_stats <- summary(step_model)
p_values <- summary_stats$coefficients[, "Pr(>|t|)"]
# Create a nice formatted output
p_values_df <- data.frame(
Variable = names(p_values),
P_Value = p_values
) %>%
arrange(P_Value)  # Sort by p-value
# Print with nice formatting
print(p_values_df, digits = 3)
significant_vars <- p_values_df %>%
filter(P_Value < 0.05)
print(significant_vars, digits = 3)
summary_stats <- summary(step_model)
p_values <- summary_stats$coefficients[, "Pr(>|t|)"]
# Create a nice formatted output
p_values_df <- data.frame(
Variable = names(p_values),
P_Value = p_values
) %>%
arrange(P_Value)  # Sort by p-value
# Print with nice formatting
print(p_values_df, digits = 3)
# Or if you want just the significant ones (p < 0.05):
significant_vars <- p_values_df %>%
filter(P_Value < 0.05)
print(significant_vars, digits = 3)
kepler_data$koi_disposition <- as.factor(kepler_data$koi_disposition)
# Create initial model with all predictors
initial_model <- glm(koi_disposition ~ koi_period + koi_impact + koi_duration +
koi_depth + koi_prad + koi_teq + koi_insol + koi_steff +
koi_slogg + koi_srad + koi_model_snr + koi_score,
family = binomial(link = 'logit'),
data = kepler_data)
# Apply stepwise selection
stepwise_model <- stepAIC(initial_model, direction = "both")
kepler_data$koi_disposition <- as.factor(kepler_data$koi_disposition)
# Create initial model with all predictors
initial_model <- glm(koi_disposition ~ koi_period + koi_impact + koi_duration +
koi_depth + koi_prad + koi_teq + koi_insol + koi_steff +
koi_slogg + koi_srad + koi_model_snr + koi_score,
family = binomial(link = 'logit'),
data = kepler_data)
# Apply stepwise selection
stepwise_model <- stepAIC(initial_model, direction = "both")
# Print summary of final model with stars
print(summary(stepwise_model))
# Set script current directory as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read and prepare data
asteroids <- read.csv("Asteroid_Updated.csv")
# Read and prepare data
asteroids <- read.csv("train_df")
gc()
# Set script current directory as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read and prepare data
asteroids <- read.csv("exoTrain.csv")
gc()
# Set script current directory as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read and prepare data
Train_df <- read.csv("exoTrain.csv")
colSums(is.na(Train_df))
unique(Train_df)
unique(Train_df$LABEL)
print(table(stars_subset$LABEL))
stars_list <- Train_df[Train_df$LABEL == 2, ]
indices <- which(Train_df$LABEL == 2)
print(indices)
ggplot(Train_df, aes(x = factor(LABEL))) +
geom_bar(fill = "steelblue") +
labs(title = "Distribution of Labels",
x = "Label",
y = "Count") +
theme_minimal() +
geom_text(stat = 'count',
aes(label = paste0(..count.., "\n(",
round(..count../nrow(Train_df)*100, 1), "%)")),
vjust = -0.5)
Train_df$LABEL <- replace(Train_df$LABEL, Train_df$LABEL == 2, 1)
Train_df$LABEL <- replace(Train_df$LABEL, Train_df$LABEL == 1, 0)
plot_df <- Train_df %>%
select(-LABEL)
plot_df <- subset(Train_df, select = -LABEL)
par(mfrow = c(1, 3))
for(i in 1:3) {
col_name <- paste0("FLUX.", i)
boxplot(Train_df[[col_name]] ~ Train_df$LABEL,
main = paste("Boxplot of", col_name),
xlab = "LABEL",
ylab = col_name)
}
library(dplyr)
Train_df <- Train_df %>%
filter(FLUX.2 <= 0.25e6)
par(mfrow = c(1, 3))
for(i in 1:3) {
col_name <- paste0("FLUX.", i)
boxplot(Train_df[[col_name]] ~ Train_df$LABEL,
main = paste("Boxplot of", col_name),
xlab = "LABEL",
ylab = col_name)
par(mfrow = c(1, 3))
for(i in 1:3) {
col_name <- paste0("FLUX.", i)
boxplot(Train_df[[col_name]] ~ Train_df$LABEL,
main = paste("Boxplot of", col_name),
xlab = "LABEL",
ylab = col_name)
}
Train_df <- Train_df %>%
filter(FLUX.2 <= 0.25e6)
par(mfrow = c(1, 3))
for(i in 1:3) {
col_name <- paste0("FLUX.", i)
boxplot(Train_df[[col_name]] ~ Train_df$LABEL,
main = paste("Boxplot of", col_name),
xlab = "LABEL",
ylab = col_name)
}
par(mfrow = c(1, 3))
for(i in 1:3) {
col_name <- paste0("FLUX.", i)
boxplot(Train_df[[col_name]] ~ Train_df$LABEL,
main = paste("Boxplot of", col_name),
xlab = "LABEL",
ylab = col_name)
}
for(i in 1:3) {
col_name <- paste0("FLUX.", i)
boxplot(Train_df[[col_name]] ~ Train_df$LABEL,
main = paste("Boxplot of", col_name),
xlab = "LABEL",
ylab = col_name)
}
for(i in 1:3) {
col_name <- paste0("FLUX.", i)
boxplot(Train_df[[col_name]] ~ Train_df$LABEL,
main = paste("Boxplot of", col_name),
xlab = "LABEL",
ylab = col_name)
}
par(mfrow = c(1, 3))
for(i in 1:3) {
col_name <- paste0("FLUX.", i)
boxplot(Train_df[[col_name]] ~ Train_df$LABEL,
main = paste("Boxplot of", col_name),
xlab = "LABEL",
ylab = col_name)
}
par(mfrow = c(1, 3))
for(i in 1:3) {
col_name <- paste0("FLUX.", i)
boxplot(Train_df[[col_name]] ~ Train_df$LABEL,
main = paste("Boxplot of", col_name),
xlab = "LABEL",
ylab = col_name)
}
plots <- list()
for(i in 1:3) {
col_name <- paste0("FLUX.", i)
plots[[i]] <- ggplot(Train_df, aes(x = factor(LABEL), y = .data[[col_name]], fill = factor(LABEL))) +
geom_boxplot() +
labs(title = paste("Boxplot of", col_name),
x = "LABEL",
y = col_name) +
theme_minimal()
}
exit
