# Predictions of 'Ozone' when 'Solar.R' = 10
p1 <- predict(model1, data.frame("X" = 10))
p1
# Predictions of 'Ozone' when 'Wind' = 5
p2 <- predict(model2, data.frame("X" = 5))
p2
# Predictions of 'Ozone' when 'Solar.R' = 10
p1 <- predict(model1, newdata = data.frame("X" = 10))
p1
# Predictions of 'Ozone' when 'Wind' = 5
p2 <- predict(model2, data.frame("X" = 5))
p2
# Predictions of 'Ozone' when 'Solar.R' = 10
p1 <- predict(model1, newdata = data.frame(x = 10))
p1
# Predictions of 'Ozone' when 'Wind' = 5
p2 <- predict(model2, data.frame("X" = 5))
p2
# Predictions of 'Ozone' when 'Solar.R' = 10
p1 <- predict(model1, newdata = data.frame(X = 10))
p1
# Predictions of 'Ozone' when 'Wind' = 5
p2 <- predict(model2, data.frame("X" = 5))
p2
# Predictions of 'Ozone' when 'Solar.R' = 10
p1 <- predict(model1, data.frame("X" = 10))
p1
# Predictions of 'Ozone' when 'Wind' = 5
p2 <- predict(model2, data.frame("X" = 5))
p2
# Predictions of 'Ozone' when 'Solar.R' = 10
p1 <- predict(model1, data.frame("X" = 10))
p1
# Predictions of 'Ozone' when 'Wind' = 5
p2 <- predict(model2(x)), data.frame("X" = 5))
# Predictions of 'Ozone' when 'Solar.R' = 10
p1 <- predict(model1, data.frame("X" = 10))
p1
# Predictions of 'Ozone' when 'Wind' = 5
p2 <- predict(model2, data.frame("X" = 5))
p2
#install.packages("readr")
library(readr)
library(lubridate)
aero <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
View(aero)
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "-", NA, aero$Route)
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
View(aero)
#install.packages("readr")
library(readr)
library(lubridate)
aero <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "", NA, aero$Route)
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
#install.packages("readr")
library(readr)
library(lubridate)
aero <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "", NA, aero$Route)
aero$Type <- ifelse(aero$Type == "", NA, aero$Type)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
View(aero)
#install.packages("readr")
library(readr)
library(lubridate)
aero <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "", NA, aero$Route)
aero$Type <- ifelse(aero$Type == "", NA, aero$Type)
aero$Registration <- ifelse(aero$Registration == "", NA, aero$Registration)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Registration)
#install.packages("readr")
library(readr)
library(lubridate)
aero <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Registration)
str(aero$cn.In)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "", NA, aero$Route)
aero$Type <- ifelse(aero$Type == "", NA, aero$Type)
aero$Registration <- ifelse(aero$Registration == "", NA, aero$Registration)
aero$cn.In <- ifelse(aero$cn.In == "", NA, aero$cn.In)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
na_count1 <- sum(is.na(aero$Date))
na_count2 <- sum(is.na(aero$Time))
na_count3 <- sum(is.na(aero$Operator))
na_count4 <- sum(is.na(aero$Flight..))
na_count5 <- sum(is.na(aero$Route))
na_count6 <- sum(is.na(aero$Type))
na_count7 <- sum(is.na(aero$Registration))
na_count8 <- sum(is.na(aero$cn.In))
na_count1
na_count2
na_count3
na_count4
na_count5
na_count6
na_count7
na_count8
#install.packages("readr")
library(readr)
library(lubridate)
aero <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Registration)
str(aero$cn.In)
str(aero$Aboard)
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "", NA, aero$Route)
aero$Type <- ifelse(aero$Type == "", NA, aero$Type)
aero$Registration <- ifelse(aero$Registration == "", NA, aero$Registration)
aero$cn.In <- ifelse(aero$cn.In == "", NA, aero$cn.In)
aero$Aboard <- ifelse(aero$Aboard == "", NA, aero$Aboard)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
View(aero)
na_count1 <- sum(is.na(aero$Date))
na_count2 <- sum(is.na(aero$Time))
na_count3 <- sum(is.na(aero$Operator))
na_count4 <- sum(is.na(aero$Flight..))
na_count5 <- sum(is.na(aero$Route))
na_count6 <- sum(is.na(aero$Type))
na_count7 <- sum(is.na(aero$Registration))
na_count8 <- sum(is.na(aero$cn.In))
na_count9 <- sum(is.na(aero$Aboard))
na_count1
na_count2
na_count3
na_count4
na_count5
na_count6
na_count7
na_count8
na_count9
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
na_count1 <- sum(is.na(aero$Date))
na_count2 <- sum(is.na(aero$Time))
na_count3 <- sum(is.na(aero$Operator))
na_count4 <- sum(is.na(aero$Flight..))
na_count5 <- sum(is.na(aero$Route))
na_count6 <- sum(is.na(aero$Type))
na_count7 <- sum(is.na(aero$Registration))
na_count8 <- sum(is.na(aero$cn.In))
na_count9 <- sum(is.na(aero$Aboard))
na_count10 <- sum(is.na(aero$Fatalities))
na_count1
na_count2
na_count3
na_count4
na_count5
na_count6
na_count7
na_count8
na_count9
na_count10
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Registration)
str(aero$cn.In)
str(aero$Aboard)
str(aero$Fatalities)
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Registration)
str(aero$cn.In)
str(aero$Aboard)
str(aero$Fatalities)
str(aero$Ground)
str(aero$Summary)
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "", NA, aero$Route)
aero$Type <- ifelse(aero$Type == "", NA, aero$Type)
aero$Registration <- ifelse(aero$Registration == "", NA, aero$Registration)
aero$cn.In <- ifelse(aero$cn.In == "", NA, aero$cn.In)
aero$Summary <- ifelse(aero$Summary == "", NA, aero$Summary)
#install.packages("readr")
library(readr)
library(lubridate)
aero <- read.csv("Airplane_Crashes_and_Fatalities_Since_1908.csv")
str(aero$Date)
str(aero$Time)
str(aero$Location)
str(aero$Operator)
str(aero$Route)
str(aero$type)
str(aero$Registration)
str(aero$cn.In)
str(aero$Aboard)
str(aero$Fatalities)
str(aero$Ground)
str(aero$Summary)
aero$Date <- as.Date(aero$Date, format="%m/%d/%Y") # Change Date from a char to Date data type
aero$Time <- lubridate::hm(aero$Time) # Change from char to lubridate
aero$Location <- ifelse(aero$Location == "", NA, aero$Location)
aero$Operator <- ifelse(aero$Operator == "", NA, aero$Operator)
aero$Flight.. <- ifelse(aero$Flight.. == "", NA, aero$Flight..)
aero$Flight.. <- ifelse(aero$Flight.. == "-", NA, aero$Flight..)
aero$Route <- ifelse(aero$Route == "", NA, aero$Route)
aero$Type <- ifelse(aero$Type == "", NA, aero$Type)
aero$Registration <- ifelse(aero$Registration == "", NA, aero$Registration)
aero$cn.In <- ifelse(aero$cn.In == "", NA, aero$cn.In)
aero$Summary <- ifelse(aero$Summary == "", NA, aero$Summary)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
na_count1 <- sum(is.na(aero$Date))
na_count2 <- sum(is.na(aero$Time))
na_count3 <- sum(is.na(aero$Operator))
na_count4 <- sum(is.na(aero$Flight..))
na_count5 <- sum(is.na(aero$Route))
na_count6 <- sum(is.na(aero$Type))
na_count7 <- sum(is.na(aero$Registration))
na_count8 <- sum(is.na(aero$cn.In))
na_count9 <- sum(is.na(aero$Aboard))
na_count10 <- sum(is.na(aero$Fatalities))
na_count11 <- sum(is.na(aero$Ground))
na_count12 <- sum(is.na(aero$Summary))
na_count1
na_count2
na_count3
na_count4
na_count5
na_count6
na_count7
na_count8
na_count9
na_count10
na_count11
na_count12
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
#round(misscol, 2)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
#round(misscol, 2)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
misscol
#round(misscol, 2)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 2)
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#aero$Date[aero$Date == ""] <- NA # Fill in empty string with NA
#print(aero$Date)
#print(aero$Time)
misscol <- colSums(is.na(aero)) / nrow(aero)
round(misscol, 3)
na_count1 <- sum(is.na(aero$Date))
na_count2 <- sum(is.na(aero$Time))
na_count3 <- sum(is.na(aero$Operator))
na_count4 <- sum(is.na(aero$Flight..))
na_count5 <- sum(is.na(aero$Route))
na_count6 <- sum(is.na(aero$Type))
na_count7 <- sum(is.na(aero$Registration))
na_count8 <- sum(is.na(aero$cn.In))
na_count9 <- sum(is.na(aero$Aboard))
na_count10 <- sum(is.na(aero$Fatalities))
na_count11 <- sum(is.na(aero$Ground))
na_count12 <- sum(is.na(aero$Summary))
na_count1
na_count2
na_count3
na_count4
na_count5
na_count6
na_count7
na_count8
na_count9
na_count10
na_count11
na_count12
unique(aero$Route)
unique(aero$Route).sum()
p <- unique(aero$Route)
sum(p)
p <- unique(aero$Registration)
unique(aero$Registration)
library(tidytext)
install.packages("tidytext")
library('caret')
# load the data set:
heart <- read.csv("………. / heart_disease.csv", sep = ',', header = FALSE)
library('caret')
# load the data set:
heart <- read.csv("………. / heart_disease.csv", sep = ',', header = FALSE)
library('caret')
# load the data set:
heart <- read.csv("………. / heart_disease.csv", sep = ',', header = FALSE)
setwd("~/GitHub/Data-Science-and-Machine-Learning-with-R-from-A-Z-Course/Uni Labs")
library('caret')
# load the data set:
heart <- read.csv("………. / heart_disease.csv", sep = ',', header = FALSE)
library('caret')
# load the data set:
heart <- read.csv("heart_disease.csv", sep = ',', header = FALSE)
library('caret')
# load the data set:
heart <- read.csv("heart_disease.csv", sep = ',', header = FALSE)
library('caret')
# load the data set:
heart <- read.csv("heart_disease.csv", sep = ',', header = FALSE)
library('caret')
# load the data set:
heart <- read.csv("heart_disease.csv", sep = ',', header = FALSE)
str(heart)
# Check the structure of our dataset
str(heart)
library('caret')
# load the data set:
heart <- read.csv("heart_disease.csv", sep = ',', header = FALSE)
# Check the structure of our dataset
str(heart)
intrain <- createDataPartition(y = heart$V14, p= 0.7, list = FALSE)
training <- heart[intrain,]
testing <- heart[-intrain,]
dim(heart)
dim(training)
dim(testing)
anyNA(heart)
summary(heart)
training[["V14"]] = factor(training[["V14"]])
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Linear <- train(V14 ~., data = training, method =
"svmLinear",trControl=trctrl,preProcess = c("center", "scale"),tuneLength
= 10)
svm_Linear
test_pred <- predict(svm_Linear, newdata = testing)
test_pred
confusionMatrix(table(test_pred, testing$V14))
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25,
1.5, 1.75, 2,5))
svm_Linear_Grid <- train(V14 ~., data = training, method =
"svmLinear",trControl=trctrl,preProcess = c("center", "scale"),tuneGrid =
grid,tuneLength = 10)
svm_Linear_Grid
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25,
1.5, 1.75, 2,5))
svm_Linear_Grid <- train(V14 ~., data = training, method = "svmLinear",trControl=trctrl,preProcess = c("center", "scale"),tuneGrid = grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
confusionMatrix(table(test_pred_grid, testing$V14))
confusionMatrix(table(test_pred_grid, testing$V14))
test_pred_grid <- predict(svm_Linear_Grid, newdata = testing)
test_pred_grid
confusionMatrix(table(test_pred_grid, testing$V14))
